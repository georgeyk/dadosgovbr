{
    "version": 1, 
    "interactions": [
        {
            "response": {
                "status": {
                    "message": "OK", 
                    "code": 200
                }, 
                "body": {
                    "string": "{\"help\": \"\\n    Searches for resources satisfying a given search criteria.\\n\\n    It returns a dictionary with 2 fields: ``count`` and ``results``.  The\\n    ``count`` field contains the total number of Resources found without the\\n    limit or query parameters having an effect.  The ``results`` field is a\\n    list of dictized Resource objects.\\n\\n    The 'query' parameter is a required field.  It is a string of the form\\n    ``{field}:{term}`` or a list of strings, each of the same form.  Within\\n    each string, ``{field}`` is a field or extra field on the Resource domain\\n    object.\\n\\n    If ``{field}`` is ``\\\"hash\\\"``, then an attempt is made to match the\\n    `{term}` as a *prefix* of the ``Resource.hash`` field.\\n\\n    If ``{field}`` is an extra field, then an attempt is made to match against\\n    the extra fields stored against the Resource.\\n\\n    Note: The search is limited to search against extra fields declared in\\n    the config setting ``ckan.extra_resource_fields``.\\n\\n    Note: Due to a Resource's extra fields being stored as a json blob, the\\n    match is made against the json string representation.  As such, false\\n    positives may occur:\\n\\n    If the search criteria is: ::\\n\\n        query = \\\"field1:term1\\\"\\n\\n    Then a json blob with the string representation of: ::\\n\\n        {\\\"field1\\\": \\\"foo\\\", \\\"field2\\\": \\\"term1\\\"}\\n\\n    will match the search criteria!  This is a known short-coming of this\\n    approach.\\n\\n    All matches are made ignoring case; and apart from the ``\\\"hash\\\"`` field,\\n    a term matches if it is a substring of the field's value.\\n\\n    Finally, when specifying more than one search criteria, the criteria are\\n    AND-ed together.\\n\\n    The ``order`` parameter is used to control the ordering of the results.\\n    Currently only ordering one field is available, and in ascending order\\n    only.\\n\\n    The ``fields`` parameter is deprecated as it is not compatible with calling\\n    this action with a GET request to the action API.\\n\\n    The context may contain a flag, `search_query`, which if True will make\\n    this action behave as if being used by the internal search api.  ie - the\\n    results will not be dictized, and SearchErrors are thrown for bad search\\n    queries (rather than ValidationErrors).\\n\\n    :param query: The search criteria.  See above for description.\\n    :type query: string or list of strings of the form \\\"{field}:{term1}\\\"\\n    :param fields: Deprecated\\n    :type fields: dict of fields to search terms.\\n    :param order_by: A field on the Resource model that orders the results.\\n    :type order_by: string\\n    :param offset: Apply an offset to the query.\\n    :type offset: int\\n    :param limit: Apply a limit to the query.\\n    :type limit: int\\n\\n    :returns:  A dictionary with a ``count`` field, and a ``results`` field.\\n    :rtype: dict\\n\\n    \", \"success\": true, \"result\": {\"count\": 0, \"results\": []}}"
                }, 
                "headers": {
                    "connection": [
                        "keep-alive"
                    ], 
                    "pragma": [
                        "no-cache"
                    ], 
                    "via": [
                        "1.1 varnish"
                    ], 
                    "access-control-allow-headers": [
                        "X-CKAN-API-KEY, Authorization, Content-Type"
                    ], 
                    "content-length": [
                        "2931"
                    ], 
                    "age": [
                        "0"
                    ], 
                    "date": [
                        "Mon, 06 Jul 2015 23:49:32 GMT"
                    ], 
                    "cache-control": [
                        "no-cache"
                    ], 
                    "server": [
                        "Apache/2.2.15 (CentOS)"
                    ], 
                    "x-varnish": [
                        "1042718385"
                    ], 
                    "access-control-allow-origin": [
                        "*"
                    ], 
                    "access-control-allow-methods": [
                        "POST, PUT, GET, DELETE, OPTIONS"
                    ], 
                    "content-type": [
                        "application/json;charset=utf-8"
                    ]
                }
            }, 
            "request": {
                "method": "GET", 
                "uri": "http://dados.gov.br/api/3/action/resource_search?query=name%3Aarcoiro", 
                "body": null, 
                "headers": {
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ], 
                    "Accept": [
                        "*/*"
                    ], 
                    "Connection": [
                        "keep-alive"
                    ], 
                    "User-Agent": [
                        "python-requests/2.7.0 CPython/2.7.6 Linux/3.13.0-55-generic"
                    ]
                }
            }
        }, 
        {
            "response": {
                "status": {
                    "message": "OK", 
                    "code": 200
                }, 
                "body": {
                    "string": "{\"help\": \"\\n    Searches for resources satisfying a given search criteria.\\n\\n    It returns a dictionary with 2 fields: ``count`` and ``results``.  The\\n    ``count`` field contains the total number of Resources found without the\\n    limit or query parameters having an effect.  The ``results`` field is a\\n    list of dictized Resource objects.\\n\\n    The 'query' parameter is a required field.  It is a string of the form\\n    ``{field}:{term}`` or a list of strings, each of the same form.  Within\\n    each string, ``{field}`` is a field or extra field on the Resource domain\\n    object.\\n\\n    If ``{field}`` is ``\\\"hash\\\"``, then an attempt is made to match the\\n    `{term}` as a *prefix* of the ``Resource.hash`` field.\\n\\n    If ``{field}`` is an extra field, then an attempt is made to match against\\n    the extra fields stored against the Resource.\\n\\n    Note: The search is limited to search against extra fields declared in\\n    the config setting ``ckan.extra_resource_fields``.\\n\\n    Note: Due to a Resource's extra fields being stored as a json blob, the\\n    match is made against the json string representation.  As such, false\\n    positives may occur:\\n\\n    If the search criteria is: ::\\n\\n        query = \\\"field1:term1\\\"\\n\\n    Then a json blob with the string representation of: ::\\n\\n        {\\\"field1\\\": \\\"foo\\\", \\\"field2\\\": \\\"term1\\\"}\\n\\n    will match the search criteria!  This is a known short-coming of this\\n    approach.\\n\\n    All matches are made ignoring case; and apart from the ``\\\"hash\\\"`` field,\\n    a term matches if it is a substring of the field's value.\\n\\n    Finally, when specifying more than one search criteria, the criteria are\\n    AND-ed together.\\n\\n    The ``order`` parameter is used to control the ordering of the results.\\n    Currently only ordering one field is available, and in ascending order\\n    only.\\n\\n    The ``fields`` parameter is deprecated as it is not compatible with calling\\n    this action with a GET request to the action API.\\n\\n    The context may contain a flag, `search_query`, which if True will make\\n    this action behave as if being used by the internal search api.  ie - the\\n    results will not be dictized, and SearchErrors are thrown for bad search\\n    queries (rather than ValidationErrors).\\n\\n    :param query: The search criteria.  See above for description.\\n    :type query: string or list of strings of the form \\\"{field}:{term1}\\\"\\n    :param fields: Deprecated\\n    :type fields: dict of fields to search terms.\\n    :param order_by: A field on the Resource model that orders the results.\\n    :type order_by: string\\n    :param offset: Apply an offset to the query.\\n    :type offset: int\\n    :param limit: Apply a limit to the query.\\n    :type limit: int\\n\\n    :returns:  A dictionary with a ``count`` field, and a ``results`` field.\\n    :rtype: dict\\n\\n    \", \"success\": true, \"result\": {\"count\": 0, \"results\": []}}"
                }, 
                "headers": {
                    "Connection": [
                        "keep-alive"
                    ], 
                    "Pragma": [
                        "no-cache"
                    ], 
                    "Via": [
                        "1.1 varnish"
                    ], 
                    "Access-Control-Allow-Headers": [
                        "X-CKAN-API-KEY, Authorization, Content-Type"
                    ], 
                    "Content-Length": [
                        "2931"
                    ], 
                    "Age": [
                        "0"
                    ], 
                    "Date": [
                        "Tue, 14 Jul 2015 02:35:52 GMT"
                    ], 
                    "Cache-Control": [
                        "no-cache"
                    ], 
                    "Access-Control-Allow-Methods": [
                        "POST, PUT, GET, DELETE, OPTIONS"
                    ], 
                    "X-Varnish": [
                        "1152414320"
                    ], 
                    "Access-Control-Allow-Origin": [
                        "*"
                    ], 
                    "Server": [
                        "Apache/2.2.15 (CentOS)"
                    ], 
                    "Content-Type": [
                        "application/json;charset=utf-8"
                    ]
                }
            }, 
            "request": {
                "method": "GET", 
                "uri": "http://dados.gov.br/api/3/action/resource_search?query=name%3Aarcoiro", 
                "body": null, 
                "headers": {
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ], 
                    "Accept": [
                        "*/*"
                    ], 
                    "Connection": [
                        "keep-alive"
                    ], 
                    "User-Agent": [
                        "python-requests/2.7.0 CPython/3.4.0 Linux/3.13.0-57-generic"
                    ]
                }
            }
        }, 
        {
            "response": {
                "status": {
                    "message": "OK", 
                    "code": 200
                }, 
                "body": {
                    "string": "{\"help\": \"\\n    Searches for resources satisfying a given search criteria.\\n\\n    It returns a dictionary with 2 fields: ``count`` and ``results``.  The\\n    ``count`` field contains the total number of Resources found without the\\n    limit or query parameters having an effect.  The ``results`` field is a\\n    list of dictized Resource objects.\\n\\n    The 'query' parameter is a required field.  It is a string of the form\\n    ``{field}:{term}`` or a list of strings, each of the same form.  Within\\n    each string, ``{field}`` is a field or extra field on the Resource domain\\n    object.\\n\\n    If ``{field}`` is ``\\\"hash\\\"``, then an attempt is made to match the\\n    `{term}` as a *prefix* of the ``Resource.hash`` field.\\n\\n    If ``{field}`` is an extra field, then an attempt is made to match against\\n    the extra fields stored against the Resource.\\n\\n    Note: The search is limited to search against extra fields declared in\\n    the config setting ``ckan.extra_resource_fields``.\\n\\n    Note: Due to a Resource's extra fields being stored as a json blob, the\\n    match is made against the json string representation.  As such, false\\n    positives may occur:\\n\\n    If the search criteria is: ::\\n\\n        query = \\\"field1:term1\\\"\\n\\n    Then a json blob with the string representation of: ::\\n\\n        {\\\"field1\\\": \\\"foo\\\", \\\"field2\\\": \\\"term1\\\"}\\n\\n    will match the search criteria!  This is a known short-coming of this\\n    approach.\\n\\n    All matches are made ignoring case; and apart from the ``\\\"hash\\\"`` field,\\n    a term matches if it is a substring of the field's value.\\n\\n    Finally, when specifying more than one search criteria, the criteria are\\n    AND-ed together.\\n\\n    The ``order`` parameter is used to control the ordering of the results.\\n    Currently only ordering one field is available, and in ascending order\\n    only.\\n\\n    The ``fields`` parameter is deprecated as it is not compatible with calling\\n    this action with a GET request to the action API.\\n\\n    The context may contain a flag, `search_query`, which if True will make\\n    this action behave as if being used by the internal search api.  ie - the\\n    results will not be dictized, and SearchErrors are thrown for bad search\\n    queries (rather than ValidationErrors).\\n\\n    :param query: The search criteria.  See above for description.\\n    :type query: string or list of strings of the form \\\"{field}:{term1}\\\"\\n    :param fields: Deprecated\\n    :type fields: dict of fields to search terms.\\n    :param order_by: A field on the Resource model that orders the results.\\n    :type order_by: string\\n    :param offset: Apply an offset to the query.\\n    :type offset: int\\n    :param limit: Apply a limit to the query.\\n    :type limit: int\\n\\n    :returns:  A dictionary with a ``count`` field, and a ``results`` field.\\n    :rtype: dict\\n\\n    \", \"success\": true, \"result\": {\"count\": 0, \"results\": []}}"
                }, 
                "headers": {
                    "connection": [
                        "keep-alive"
                    ], 
                    "pragma": [
                        "no-cache"
                    ], 
                    "via": [
                        "1.1 varnish"
                    ], 
                    "access-control-allow-headers": [
                        "X-CKAN-API-KEY, Authorization, Content-Type"
                    ], 
                    "content-length": [
                        "2931"
                    ], 
                    "age": [
                        "49"
                    ], 
                    "date": [
                        "Tue, 14 Jul 2015 02:36:41 GMT"
                    ], 
                    "cache-control": [
                        "no-cache"
                    ], 
                    "server": [
                        "Apache/2.2.15 (CentOS)"
                    ], 
                    "x-varnish": [
                        "1152414385 1152414320"
                    ], 
                    "access-control-allow-origin": [
                        "*"
                    ], 
                    "access-control-allow-methods": [
                        "POST, PUT, GET, DELETE, OPTIONS"
                    ], 
                    "content-type": [
                        "application/json;charset=utf-8"
                    ]
                }
            }, 
            "request": {
                "method": "GET", 
                "uri": "http://dados.gov.br/api/3/action/resource_search?query=name%3Aarcoiro", 
                "body": null, 
                "headers": {
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ], 
                    "Accept": [
                        "*/*"
                    ], 
                    "Connection": [
                        "keep-alive"
                    ], 
                    "User-Agent": [
                        "python-requests/2.7.0 CPython/2.7.6 Linux/3.13.0-57-generic"
                    ]
                }
            }
        }
    ]
}